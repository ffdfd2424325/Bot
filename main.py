import asyncio
import logging
import sqlite3
from datetime import datetime, time, timedelta
from typing import Dict, List, Optional, Tuple

import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GROUP_CHAT_ID = int(os.getenv('GROUP_CHAT_ID', 0))
REPORTS_TOPIC_ID = os.getenv('REPORTS_TOPIC_ID') or None
DATABASE_PATH = os.getenv('DATABASE_PATH', 'reports.db')
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=getattr(logging, LOG_LEVEL.upper()))
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∏—Ö —Ç–µ–≥–æ–≤
PARTICIPANTS = {
    '@A_N_yaki': '#–∞–Ω',
    '@Dev_Jones': '#–¥–µ–Ω',
    '@FenolIFtalein': '#–Ω–∏–∫–∏—Ç–∞',
    '@Igor_Lucklett': '#–∏–≥–æ—Ä—å',
    '@Melnikova_Alena': '#–∞–ª',
    '@Mikhailovmind': '#—Ç–æ—Ä',
    '@Polyhakayna0': '#–ø–æ–ª–∏',
    '@Wlad_is_law': '#–≤',
    '@bleffucio': '#–∞—Ä–∫',
    '@helga_sigy': '#–æ–ª—è',
    '@mix_nastya': '#–Ω–∞—Å—è',
    '@nadezhda_efremova123': '#–Ω–∞–¥—è',
    '@travellove_krd': '#–ª—é–±–æ–≤—å'
}

# –¢–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤ –∏ –∏—Ö –¥–µ–¥–ª–∞–π–Ω—ã
REPORT_TYPES = {
    '#–æ—É': {'name': '–£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç', 'deadline': time(10, 0)},
    '#–æ—Å': {'name': '–°–ø–æ—Ä—Ç', 'deadline': time(23, 59)},
    '#–æ–≤': {'name': '–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç', 'deadline': time(23, 59)},
    '#–≥—Å–¥': {'name': '–ì–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–Ω—è', 'deadline': time(23, 59)}
}

class ReportDatabase:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""

    def __init__(self, db_path: str):
        self.db_path = db_path
        self.init_db()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            conn.execute('''
                CREATE TABLE IF NOT EXISTS reports (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_tag TEXT NOT NULL,
                    report_type TEXT NOT NULL,
                    report_date DATE NOT NULL,
                    submission_time TIME NOT NULL,
                    username TEXT,
                    message_id INTEGER,
                    UNIQUE(user_tag, report_type, report_date)
                )
            ''')
            conn.commit()

    def save_report(self, user_tag: str, report_type: str, submission_time: datetime,
                   username: str, message_id: int):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        date_str = submission_time.date().isoformat()
        time_str = submission_time.time().isoformat()

        with sqlite3.connect(self.db_path) as conn:
            conn.execute('''
                INSERT OR REPLACE INTO reports
                (user_tag, report_type, report_date, submission_time, username, message_id)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (user_tag, report_type, date_str, time_str, username, message_id))
            conn.commit()

    def get_reports_for_date(self, date: datetime) -> Dict[str, Dict[str, Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
        date_str = date.date().isoformat()

        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.execute('''
                SELECT user_tag, report_type, submission_time, username
                FROM reports
                WHERE report_date = ?
                ORDER BY user_tag, report_type
            ''', (date_str,))

            reports = {}
            for row in cursor.fetchall():
                user_tag, report_type, time_str, username = row
                if user_tag not in reports:
                    reports[user_tag] = {}
                reports[user_tag][report_type] = {
                    'time': time_str,
                    'username': username
                }

            return reports

    def cleanup_old_reports(self, days_to_keep: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        cutoff_date = datetime.now() - timedelta(days=days_to_keep)
        cutoff_str = cutoff_date.date().isoformat()

        with sqlite3.connect(self.db_path) as conn:
            conn.execute('DELETE FROM reports WHERE report_date < ?', (cutoff_str,))
            conn.commit()

class ReportBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""

    def __init__(self):
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher()
        self.db = ReportDatabase(DATABASE_PATH)
        self.scheduler = AsyncIOScheduler()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.message.register(self.handle_message, lambda msg: msg.chat.id == GROUP_CHAT_ID)
        self.dp.startup.register(self.on_startup)
        self.dp.shutdown.register(self.on_shutdown)

    async def on_startup(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.scheduler.add_job(
            self.send_daily_report,
            CronTrigger(hour=0, minute=5),
            id='daily_report',
            replace_existing=True
        )
        self.scheduler.start()

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.db.cleanup_old_reports()

    async def on_shutdown(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.scheduler.shutdown()

    def parse_message(self, text: str, username: str) -> List[Tuple[str, str]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤"""
        reports = []
        words = text.lower().split()

        for word in words:
            if word.startswith('#') and len(word) > 1:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–∏–ø–æ–º –æ—Ç—á–µ—Ç–∞
                if word[:3] in REPORT_TYPES:
                    report_type = word[:3]

                    # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                    participant_tag = None
                    for tag in words:
                        if tag in PARTICIPANTS.values():
                            participant_tag = tag
                            break

                    # –ï—Å–ª–∏ —Ç–µ–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º username
                    if not participant_tag and username in PARTICIPANTS:
                        participant_tag = PARTICIPANTS[username]

                    if participant_tag:
                        reports.append((report_type, participant_tag))

        return reports

    async def handle_message(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not message.text:
            return

        username = f"@{message.from_user.username}" if message.from_user.username else ""
        parsed_reports = self.parse_message(message.text, username)

        if parsed_reports:
            submission_time = message.date

            for report_type, user_tag in parsed_reports:
                self.db.save_report(
                    user_tag=user_tag,
                    report_type=report_type,
                    submission_time=submission_time,
                    username=username,
                    message_id=message.message_id
                )

                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç—á–µ—Ç: {user_tag} - {report_type} –≤ {submission_time}")

    def format_report_status(self, reports: Dict, date: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–æ–≤"""
        date_str = date.strftime("%d.%m.%Y")

        message_parts = [f"üìä **–°–≤–æ–¥–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ {date_str}**\n"]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        all_users = list(PARTICIPANTS.values())

        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
        for report_type, info in REPORT_TYPES.items():
            submitted_users = []
            late_users = []
            missing_users = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
            if report_type == '#–æ—É':
                deadline = datetime.combine(date.date(), info['deadline'])
            else:
                deadline = datetime.combine(date.date(), info['deadline'])

            for user_tag in all_users:
                if user_tag in reports and report_type in reports[user_tag]:
                    submission_time = datetime.fromisoformat(reports[user_tag][report_type]['time'])

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –æ—Ç—á–µ—Ç —Å–¥–∞–Ω –≤–æ–≤—Ä–µ–º—è
                    if report_type == '#–æ—É' and submission_time.time() > info['deadline']:
                        late_users.append(user_tag)
                    else:
                        submitted_users.append(user_tag)
                else:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–æ–ø—É—â–µ–Ω –ª–∏ –¥–µ–¥–ª–∞–π–Ω
                    if report_type == '#–æ—É':
                        if datetime.now().time() > info['deadline']:
                            missing_users.append(user_tag)
                    else:
                        # –î–ª—è –≤–µ—á–µ—Ä–Ω–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–µ–¥–ª–∞–π–Ω –≤ 23:59
                        if datetime.now().date() > date.date():
                            missing_users.append(user_tag)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
            emoji = {'#–æ—É': 'üåÖ', '#–æ—Å': 'üèÉ', '#–æ–≤': 'üåô', '#–≥—Å–¥': '‚≠ê'}[report_type]
            message_parts.append(f"\n{emoji} **{info['name']}:**")

            if submitted_users:
                message_parts.append(f"‚úÖ –í–æ–≤—Ä–µ–º—è: {', '.join(submitted_users)}")

            if late_users:
                message_parts.append(f"‚ö†Ô∏è –û–ø–æ–∑–¥–∞–ª–∏: {', '.join(late_users)}")

            if missing_users:
                message_parts.append(f"‚ùå –ù–µ —Å–¥–∞–ª–∏: {', '.join(missing_users)}")

        return "\n".join(message_parts)

    async def send_daily_report(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        try:
            yesterday = datetime.now() - timedelta(days=1)
            reports = self.db.get_reports_for_date(yesterday)

            report_message = self.format_report_status(reports, yesterday)

            await self.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=report_message,
                parse_mode="Markdown"
            )

            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–≤–æ–¥–∫–∞ –∑–∞ {yesterday.strftime('%d.%m.%Y')}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        finally:
            await self.bot.session.close()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = ReportBot()
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())
